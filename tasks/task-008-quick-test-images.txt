任务：实现"快速测试"功能 - 提供预设测试图片供用户快速体验

## 背景
用户反馈希望能快速体验图片修复功能，而不用先从相册选择图片。我们提供了5张预设测试图片，让用户可以一键体验。

## 目标
在 pages/index/index 页面添加"快速测试"功能，展示预设的测试图片供用户选择。

## 技术实现要求

### 1. 资源准备
- ✅ 已完成：测试图片已放置在 `miniprogram/assets/quick-test/` 目录
- 图片列表：121.jpg (11KB), 122.jpg (7.7KB), 123.jpg (7.1KB), 124.jpg (5.8KB), 125.jpg (6.2KB)
- 图片格式：JPG，均为小尺寸测试图片

### 2. UI 设计要求

#### 2.1 入口位置
在 "开始修复" 区域（第43-50行），在 "点击选择图片" 上传区域**上方**添加：
- 一个可折叠的"快速测试"区域
- 默认状态：展开（首次访问时展示）
- 标题："⚡ 快速体验" 或 "🎯 快速测试"
- 提示文案："选择测试图片，快速体验修复效果"

#### 2.2 测试图片网格布局
- 横向滚动网格（5张图片横向排列）
- 每张图片：
  - 圆角卡片样式
  - 显示缩略图
  - 图片尺寸：统一，保持宽高比
  - hover/点击效果：边框高亮或阴影
- 间距：图片之间合理间距
- 响应式：在不同屏幕宽度下自适应

#### 2.3 折叠/展开交互
- 点击标题区域可折叠/展开
- 折叠时：只显示标题和一个小箭头图标
- 展开时：显示5张测试图片网格
- 动画：平滑过渡（可选）

#### 2.4 与上传区域的关系
- 快速测试区域在上方
- 上传区域在下方（保持原样）
- 两者之间有明显的视觉分隔（如分割线或间距）
- 提示："或" 字样连接两个区域

### 3. 功能逻辑要求

#### 3.1 图片选择逻辑
当用户点击某张测试图片时：
1. 读取本地资源图片路径（如 `/assets/quick-test/121.jpg`）
2. 使用 `wx.getFileSystemManager().readFile()` 或 `wx.getImageInfo()` 获取图片信息
3. 调用与 `chooseImage()` 相同的处理流程
4. 设置 `selectedFile` 数据：
   ```typescript
   {
     path: '本地资源路径',
     preview: '用于预览的路径',
     size: 文件大小,
     sizeBytes: 字节大小
   }
   ```
5. 自动滚动到预览区域

#### 3.2 状态管理
新增数据字段：
```typescript
data: {
  quickTestExpanded: true,  // 快速测试区域是否展开
  quickTestImages: [         // 测试图片列表
    { id: 1, name: '测试图片1', path: '/assets/quick-test/121.jpg' },
    { id: 2, name: '测试图片2', path: '/assets/quick-test/122.jpg' },
    { id: 3, name: '测试图片3', path: '/assets/quick-test/123.jpg' },
    { id: 4, name: '测试图片4', path: '/assets/quick-test/124.jpg' },
    { id: 5, name: '测试图片5', path: '/assets/quick-test/125.jpg' }
  ]
}
```

新增方法：
```typescript
// 切换快速测试区域展开/折叠
toggleQuickTest()

// 选择测试图片
selectQuickTestImage(e: any)
```

#### 3.3 与现有功能的兼容性
- 选择测试图片后，用户仍可点击"重新选择"从相册选择
- 测试图片与相册图片的处理逻辑应完全一致
- 不影响现有的图片上传、处理、预览流程

### 4. 样式要求

#### 4.1 颜色方案
- 主色调：与现有页面保持一致（渐变色、绿色系）
- 测试图片边框：默认灰色，hover/选中时蓝色或渐变色
- 折叠/展开图标：使用 emoji 或简单图标（▼ / ▲）

#### 4.2 响应式适配
- 在不同屏幕宽度下，图片网格自适应
- 小屏幕：横向滚动
- 大屏幕：可能显示所有图片

#### 4.3 动画效果（可选）
- 折叠/展开动画：`height` 过渡
- 图片点击动画：轻微缩放或边框闪烁
- 页面滚动动画：平滑滚动到预览区域

### 5. 用户体验要求

#### 5.1 首次访问
- 首次访问时，快速测试区域默认展开
- 醒目提示用户可以快速体验

#### 5.2 操作流畅性
- 点击测试图片后，立即显示预览
- 无需等待加载（本地图片）
- 操作反馈及时

#### 5.3 提示文案
- 清晰说明这是"测试图片"
- 引导用户可以"选择自己的图片"
- 避免用户误以为只能用测试图片

### 6. 技术细节

#### 6.1 图片路径处理
微信小程序中，本地资源图片路径格式：
- 正确：`/assets/quick-test/121.jpg`（根路径）
- 或：`../../assets/quick-test/121.jpg`（相对路径）
- 注意：需要测试在真机和开发者工具中的表现

#### 6.2 图片信息获取
```typescript
wx.getImageInfo({
  src: '/assets/quick-test/121.jpg',
  success: (res) => {
    // res.width, res.height, res.path
  }
})
```

或使用 FileSystemManager：
```typescript
const fs = wx.getFileSystemManager();
fs.getFileInfo({
  filePath: '/assets/quick-test/121.jpg',
  success: (res) => {
    // res.size
  }
})
```

#### 6.3 与 chooseImage 逻辑的统一
参考现有 `chooseImage()` 方法（index.ts 第266-306行）：
- 获取图片信息
- 设置 `selectedFile`
- 验证文件大小
- 更新 UI 状态

### 7. 测试要点

1. 测试图片是否正常显示
2. 点击测试图片后是否能正常预览
3. 测试图片能否正常上传和处理
4. 折叠/展开功能是否正常
5. 与相册选择功能是否兼容
6. 真机和开发者工具表现是否一致

### 8. 代码修改清单

需要修改的文件：
1. `miniprogram/pages/index/index.wxml` - 添加快速测试 UI
2. `miniprogram/pages/index/index.ts` - 添加快速测试逻辑
3. `miniprogram/pages/index/index.wxss` - 添加快速测试样式

### 9. UI 示意（文字描述）

```
┌─────────────────────────────────┐
│       （Header - 保持原样）      │
└─────────────────────────────────┘

┌─────────────────────────────────┐
│ 🎯 快速体验 [▼]                 │
│ 选择测试图片，快速体验修复效果    │
│                                 │
│ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐  │
│ │ 1 │ │ 2 │ │ 3 │ │ 4 │ │ 5 │  │
│ └───┘ └───┘ └───┘ └───┘ └───┘  │
└─────────────────────────────────┘

         或

┌─────────────────────────────────┐
│      📷 点击选择图片             │
│   支持 JPG、PNG、AVIF 格式       │
└─────────────────────────────────┘
```

### 10. 额外优化建议（可选）

1. 图片标签：每张测试图片显示类型标签（如"风景"、"人像"等）
2. 预加载：在页面加载时预加载测试图片，提升体验
3. 统计：记录用户使用测试图片 vs 自己图片的比例
4. 提示：首次使用后，折叠快速测试区域（localStorage）

## 输出要求

请生成完整的代码：
1. `miniprogram/pages/index/index.wxml` 的修改（完整文件）
2. `miniprogram/pages/index/index.ts` 的修改（完整文件）
3. `miniprogram/pages/index/index.wxss` 的新增样式

要求：
- 代码质量高，注释清晰
- 遵循现有代码风格
- 充分考虑边界情况
- 用户体验流畅
- 响应式设计

